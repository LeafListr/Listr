// Code generated by counterfeiter. DO NOT EDIT.
package workflowfakes

import (
	"sync"

	"github.com/Linkinlog/LeafList/internal/models"
	"github.com/Linkinlog/LeafList/internal/workflow"
)

type FakeManager struct {
	AllProductsStub        func(string, string) ([]*models.Product, error)
	allProductsMutex       sync.RWMutex
	allProductsArgsForCall []struct {
		arg1 string
		arg2 string
	}
	allProductsReturns struct {
		result1 []*models.Product
		result2 error
	}
	allProductsReturnsOnCall map[int]struct {
		result1 []*models.Product
		result2 error
	}
	AllProductsForCategoryStub        func(string, string, models.Category) ([]*models.Product, error)
	allProductsForCategoryMutex       sync.RWMutex
	allProductsForCategoryArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 models.Category
	}
	allProductsForCategoryReturns struct {
		result1 []*models.Product
		result2 error
	}
	allProductsForCategoryReturnsOnCall map[int]struct {
		result1 []*models.Product
		result2 error
	}
	CannabinoidsStub        func(string, string) ([]*models.Cannabinoid, error)
	cannabinoidsMutex       sync.RWMutex
	cannabinoidsArgsForCall []struct {
		arg1 string
		arg2 string
	}
	cannabinoidsReturns struct {
		result1 []*models.Cannabinoid
		result2 error
	}
	cannabinoidsReturnsOnCall map[int]struct {
		result1 []*models.Cannabinoid
		result2 error
	}
	CategoriesStub        func(string, string) ([]models.Category, error)
	categoriesMutex       sync.RWMutex
	categoriesArgsForCall []struct {
		arg1 string
		arg2 string
	}
	categoriesReturns struct {
		result1 []models.Category
		result2 error
	}
	categoriesReturnsOnCall map[int]struct {
		result1 []models.Category
		result2 error
	}
	LocationsStub        func(string, float64, float64) ([]*models.Brand, error)
	locationsMutex       sync.RWMutex
	locationsArgsForCall []struct {
		arg1 string
		arg2 float64
		arg3 float64
	}
	locationsReturns struct {
		result1 []*models.Brand
		result2 error
	}
	locationsReturnsOnCall map[int]struct {
		result1 []*models.Brand
		result2 error
	}
	LogErrorStub        func(error)
	logErrorMutex       sync.RWMutex
	logErrorArgsForCall []struct {
		arg1 error
	}
	OffersStub        func(string, string) ([]*models.Offer, error)
	offersMutex       sync.RWMutex
	offersArgsForCall []struct {
		arg1 string
		arg2 string
	}
	offersReturns struct {
		result1 []*models.Offer
		result2 error
	}
	offersReturnsOnCall map[int]struct {
		result1 []*models.Offer
		result2 error
	}
	ProductStub        func(string, string, string) (*models.Product, error)
	productMutex       sync.RWMutex
	productArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	productReturns struct {
		result1 *models.Product
		result2 error
	}
	productReturnsOnCall map[int]struct {
		result1 *models.Product
		result2 error
	}
	TerpenesStub        func(string, string) ([]*models.Terpene, error)
	terpenesMutex       sync.RWMutex
	terpenesArgsForCall []struct {
		arg1 string
		arg2 string
	}
	terpenesReturns struct {
		result1 []*models.Terpene
		result2 error
	}
	terpenesReturnsOnCall map[int]struct {
		result1 []*models.Terpene
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) AllProducts(arg1 string, arg2 string) ([]*models.Product, error) {
	fake.allProductsMutex.Lock()
	ret, specificReturn := fake.allProductsReturnsOnCall[len(fake.allProductsArgsForCall)]
	fake.allProductsArgsForCall = append(fake.allProductsArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.AllProductsStub
	fakeReturns := fake.allProductsReturns
	fake.recordInvocation("AllProducts", []interface{}{arg1, arg2})
	fake.allProductsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) AllProductsCallCount() int {
	fake.allProductsMutex.RLock()
	defer fake.allProductsMutex.RUnlock()
	return len(fake.allProductsArgsForCall)
}

func (fake *FakeManager) AllProductsCalls(stub func(string, string) ([]*models.Product, error)) {
	fake.allProductsMutex.Lock()
	defer fake.allProductsMutex.Unlock()
	fake.AllProductsStub = stub
}

func (fake *FakeManager) AllProductsArgsForCall(i int) (string, string) {
	fake.allProductsMutex.RLock()
	defer fake.allProductsMutex.RUnlock()
	argsForCall := fake.allProductsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeManager) AllProductsReturns(result1 []*models.Product, result2 error) {
	fake.allProductsMutex.Lock()
	defer fake.allProductsMutex.Unlock()
	fake.AllProductsStub = nil
	fake.allProductsReturns = struct {
		result1 []*models.Product
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) AllProductsReturnsOnCall(i int, result1 []*models.Product, result2 error) {
	fake.allProductsMutex.Lock()
	defer fake.allProductsMutex.Unlock()
	fake.AllProductsStub = nil
	if fake.allProductsReturnsOnCall == nil {
		fake.allProductsReturnsOnCall = make(map[int]struct {
			result1 []*models.Product
			result2 error
		})
	}
	fake.allProductsReturnsOnCall[i] = struct {
		result1 []*models.Product
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) AllProductsForCategory(arg1 string, arg2 string, arg3 models.Category) ([]*models.Product, error) {
	fake.allProductsForCategoryMutex.Lock()
	ret, specificReturn := fake.allProductsForCategoryReturnsOnCall[len(fake.allProductsForCategoryArgsForCall)]
	fake.allProductsForCategoryArgsForCall = append(fake.allProductsForCategoryArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 models.Category
	}{arg1, arg2, arg3})
	stub := fake.AllProductsForCategoryStub
	fakeReturns := fake.allProductsForCategoryReturns
	fake.recordInvocation("AllProductsForCategory", []interface{}{arg1, arg2, arg3})
	fake.allProductsForCategoryMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) AllProductsForCategoryCallCount() int {
	fake.allProductsForCategoryMutex.RLock()
	defer fake.allProductsForCategoryMutex.RUnlock()
	return len(fake.allProductsForCategoryArgsForCall)
}

func (fake *FakeManager) AllProductsForCategoryCalls(stub func(string, string, models.Category) ([]*models.Product, error)) {
	fake.allProductsForCategoryMutex.Lock()
	defer fake.allProductsForCategoryMutex.Unlock()
	fake.AllProductsForCategoryStub = stub
}

func (fake *FakeManager) AllProductsForCategoryArgsForCall(i int) (string, string, models.Category) {
	fake.allProductsForCategoryMutex.RLock()
	defer fake.allProductsForCategoryMutex.RUnlock()
	argsForCall := fake.allProductsForCategoryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeManager) AllProductsForCategoryReturns(result1 []*models.Product, result2 error) {
	fake.allProductsForCategoryMutex.Lock()
	defer fake.allProductsForCategoryMutex.Unlock()
	fake.AllProductsForCategoryStub = nil
	fake.allProductsForCategoryReturns = struct {
		result1 []*models.Product
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) AllProductsForCategoryReturnsOnCall(i int, result1 []*models.Product, result2 error) {
	fake.allProductsForCategoryMutex.Lock()
	defer fake.allProductsForCategoryMutex.Unlock()
	fake.AllProductsForCategoryStub = nil
	if fake.allProductsForCategoryReturnsOnCall == nil {
		fake.allProductsForCategoryReturnsOnCall = make(map[int]struct {
			result1 []*models.Product
			result2 error
		})
	}
	fake.allProductsForCategoryReturnsOnCall[i] = struct {
		result1 []*models.Product
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) Cannabinoids(arg1 string, arg2 string) ([]*models.Cannabinoid, error) {
	fake.cannabinoidsMutex.Lock()
	ret, specificReturn := fake.cannabinoidsReturnsOnCall[len(fake.cannabinoidsArgsForCall)]
	fake.cannabinoidsArgsForCall = append(fake.cannabinoidsArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.CannabinoidsStub
	fakeReturns := fake.cannabinoidsReturns
	fake.recordInvocation("Cannabinoids", []interface{}{arg1, arg2})
	fake.cannabinoidsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) CannabinoidsCallCount() int {
	fake.cannabinoidsMutex.RLock()
	defer fake.cannabinoidsMutex.RUnlock()
	return len(fake.cannabinoidsArgsForCall)
}

func (fake *FakeManager) CannabinoidsCalls(stub func(string, string) ([]*models.Cannabinoid, error)) {
	fake.cannabinoidsMutex.Lock()
	defer fake.cannabinoidsMutex.Unlock()
	fake.CannabinoidsStub = stub
}

func (fake *FakeManager) CannabinoidsArgsForCall(i int) (string, string) {
	fake.cannabinoidsMutex.RLock()
	defer fake.cannabinoidsMutex.RUnlock()
	argsForCall := fake.cannabinoidsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeManager) CannabinoidsReturns(result1 []*models.Cannabinoid, result2 error) {
	fake.cannabinoidsMutex.Lock()
	defer fake.cannabinoidsMutex.Unlock()
	fake.CannabinoidsStub = nil
	fake.cannabinoidsReturns = struct {
		result1 []*models.Cannabinoid
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) CannabinoidsReturnsOnCall(i int, result1 []*models.Cannabinoid, result2 error) {
	fake.cannabinoidsMutex.Lock()
	defer fake.cannabinoidsMutex.Unlock()
	fake.CannabinoidsStub = nil
	if fake.cannabinoidsReturnsOnCall == nil {
		fake.cannabinoidsReturnsOnCall = make(map[int]struct {
			result1 []*models.Cannabinoid
			result2 error
		})
	}
	fake.cannabinoidsReturnsOnCall[i] = struct {
		result1 []*models.Cannabinoid
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) Categories(arg1 string, arg2 string) ([]models.Category, error) {
	fake.categoriesMutex.Lock()
	ret, specificReturn := fake.categoriesReturnsOnCall[len(fake.categoriesArgsForCall)]
	fake.categoriesArgsForCall = append(fake.categoriesArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.CategoriesStub
	fakeReturns := fake.categoriesReturns
	fake.recordInvocation("Categories", []interface{}{arg1, arg2})
	fake.categoriesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) CategoriesCallCount() int {
	fake.categoriesMutex.RLock()
	defer fake.categoriesMutex.RUnlock()
	return len(fake.categoriesArgsForCall)
}

func (fake *FakeManager) CategoriesCalls(stub func(string, string) ([]models.Category, error)) {
	fake.categoriesMutex.Lock()
	defer fake.categoriesMutex.Unlock()
	fake.CategoriesStub = stub
}

func (fake *FakeManager) CategoriesArgsForCall(i int) (string, string) {
	fake.categoriesMutex.RLock()
	defer fake.categoriesMutex.RUnlock()
	argsForCall := fake.categoriesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeManager) CategoriesReturns(result1 []models.Category, result2 error) {
	fake.categoriesMutex.Lock()
	defer fake.categoriesMutex.Unlock()
	fake.CategoriesStub = nil
	fake.categoriesReturns = struct {
		result1 []models.Category
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) CategoriesReturnsOnCall(i int, result1 []models.Category, result2 error) {
	fake.categoriesMutex.Lock()
	defer fake.categoriesMutex.Unlock()
	fake.CategoriesStub = nil
	if fake.categoriesReturnsOnCall == nil {
		fake.categoriesReturnsOnCall = make(map[int]struct {
			result1 []models.Category
			result2 error
		})
	}
	fake.categoriesReturnsOnCall[i] = struct {
		result1 []models.Category
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) Locations(arg1 string, arg2 float64, arg3 float64) ([]*models.Brand, error) {
	fake.locationsMutex.Lock()
	ret, specificReturn := fake.locationsReturnsOnCall[len(fake.locationsArgsForCall)]
	fake.locationsArgsForCall = append(fake.locationsArgsForCall, struct {
		arg1 string
		arg2 float64
		arg3 float64
	}{arg1, arg2, arg3})
	stub := fake.LocationsStub
	fakeReturns := fake.locationsReturns
	fake.recordInvocation("Locations", []interface{}{arg1, arg2, arg3})
	fake.locationsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) LocationsCallCount() int {
	fake.locationsMutex.RLock()
	defer fake.locationsMutex.RUnlock()
	return len(fake.locationsArgsForCall)
}

func (fake *FakeManager) LocationsCalls(stub func(string, float64, float64) ([]*models.Brand, error)) {
	fake.locationsMutex.Lock()
	defer fake.locationsMutex.Unlock()
	fake.LocationsStub = stub
}

func (fake *FakeManager) LocationsArgsForCall(i int) (string, float64, float64) {
	fake.locationsMutex.RLock()
	defer fake.locationsMutex.RUnlock()
	argsForCall := fake.locationsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeManager) LocationsReturns(result1 []*models.Brand, result2 error) {
	fake.locationsMutex.Lock()
	defer fake.locationsMutex.Unlock()
	fake.LocationsStub = nil
	fake.locationsReturns = struct {
		result1 []*models.Brand
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) LocationsReturnsOnCall(i int, result1 []*models.Brand, result2 error) {
	fake.locationsMutex.Lock()
	defer fake.locationsMutex.Unlock()
	fake.LocationsStub = nil
	if fake.locationsReturnsOnCall == nil {
		fake.locationsReturnsOnCall = make(map[int]struct {
			result1 []*models.Brand
			result2 error
		})
	}
	fake.locationsReturnsOnCall[i] = struct {
		result1 []*models.Brand
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) LogError(arg1 error) {
	fake.logErrorMutex.Lock()
	fake.logErrorArgsForCall = append(fake.logErrorArgsForCall, struct {
		arg1 error
	}{arg1})
	stub := fake.LogErrorStub
	fake.recordInvocation("LogError", []interface{}{arg1})
	fake.logErrorMutex.Unlock()
	if stub != nil {
		fake.LogErrorStub(arg1)
	}
}

func (fake *FakeManager) LogErrorCallCount() int {
	fake.logErrorMutex.RLock()
	defer fake.logErrorMutex.RUnlock()
	return len(fake.logErrorArgsForCall)
}

func (fake *FakeManager) LogErrorCalls(stub func(error)) {
	fake.logErrorMutex.Lock()
	defer fake.logErrorMutex.Unlock()
	fake.LogErrorStub = stub
}

func (fake *FakeManager) LogErrorArgsForCall(i int) error {
	fake.logErrorMutex.RLock()
	defer fake.logErrorMutex.RUnlock()
	argsForCall := fake.logErrorArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) Offers(arg1 string, arg2 string) ([]*models.Offer, error) {
	fake.offersMutex.Lock()
	ret, specificReturn := fake.offersReturnsOnCall[len(fake.offersArgsForCall)]
	fake.offersArgsForCall = append(fake.offersArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.OffersStub
	fakeReturns := fake.offersReturns
	fake.recordInvocation("Offers", []interface{}{arg1, arg2})
	fake.offersMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) OffersCallCount() int {
	fake.offersMutex.RLock()
	defer fake.offersMutex.RUnlock()
	return len(fake.offersArgsForCall)
}

func (fake *FakeManager) OffersCalls(stub func(string, string) ([]*models.Offer, error)) {
	fake.offersMutex.Lock()
	defer fake.offersMutex.Unlock()
	fake.OffersStub = stub
}

func (fake *FakeManager) OffersArgsForCall(i int) (string, string) {
	fake.offersMutex.RLock()
	defer fake.offersMutex.RUnlock()
	argsForCall := fake.offersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeManager) OffersReturns(result1 []*models.Offer, result2 error) {
	fake.offersMutex.Lock()
	defer fake.offersMutex.Unlock()
	fake.OffersStub = nil
	fake.offersReturns = struct {
		result1 []*models.Offer
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) OffersReturnsOnCall(i int, result1 []*models.Offer, result2 error) {
	fake.offersMutex.Lock()
	defer fake.offersMutex.Unlock()
	fake.OffersStub = nil
	if fake.offersReturnsOnCall == nil {
		fake.offersReturnsOnCall = make(map[int]struct {
			result1 []*models.Offer
			result2 error
		})
	}
	fake.offersReturnsOnCall[i] = struct {
		result1 []*models.Offer
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) Product(arg1 string, arg2 string, arg3 string) (*models.Product, error) {
	fake.productMutex.Lock()
	ret, specificReturn := fake.productReturnsOnCall[len(fake.productArgsForCall)]
	fake.productArgsForCall = append(fake.productArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.ProductStub
	fakeReturns := fake.productReturns
	fake.recordInvocation("Product", []interface{}{arg1, arg2, arg3})
	fake.productMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) ProductCallCount() int {
	fake.productMutex.RLock()
	defer fake.productMutex.RUnlock()
	return len(fake.productArgsForCall)
}

func (fake *FakeManager) ProductCalls(stub func(string, string, string) (*models.Product, error)) {
	fake.productMutex.Lock()
	defer fake.productMutex.Unlock()
	fake.ProductStub = stub
}

func (fake *FakeManager) ProductArgsForCall(i int) (string, string, string) {
	fake.productMutex.RLock()
	defer fake.productMutex.RUnlock()
	argsForCall := fake.productArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeManager) ProductReturns(result1 *models.Product, result2 error) {
	fake.productMutex.Lock()
	defer fake.productMutex.Unlock()
	fake.ProductStub = nil
	fake.productReturns = struct {
		result1 *models.Product
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ProductReturnsOnCall(i int, result1 *models.Product, result2 error) {
	fake.productMutex.Lock()
	defer fake.productMutex.Unlock()
	fake.ProductStub = nil
	if fake.productReturnsOnCall == nil {
		fake.productReturnsOnCall = make(map[int]struct {
			result1 *models.Product
			result2 error
		})
	}
	fake.productReturnsOnCall[i] = struct {
		result1 *models.Product
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) Terpenes(arg1 string, arg2 string) ([]*models.Terpene, error) {
	fake.terpenesMutex.Lock()
	ret, specificReturn := fake.terpenesReturnsOnCall[len(fake.terpenesArgsForCall)]
	fake.terpenesArgsForCall = append(fake.terpenesArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.TerpenesStub
	fakeReturns := fake.terpenesReturns
	fake.recordInvocation("Terpenes", []interface{}{arg1, arg2})
	fake.terpenesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) TerpenesCallCount() int {
	fake.terpenesMutex.RLock()
	defer fake.terpenesMutex.RUnlock()
	return len(fake.terpenesArgsForCall)
}

func (fake *FakeManager) TerpenesCalls(stub func(string, string) ([]*models.Terpene, error)) {
	fake.terpenesMutex.Lock()
	defer fake.terpenesMutex.Unlock()
	fake.TerpenesStub = stub
}

func (fake *FakeManager) TerpenesArgsForCall(i int) (string, string) {
	fake.terpenesMutex.RLock()
	defer fake.terpenesMutex.RUnlock()
	argsForCall := fake.terpenesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeManager) TerpenesReturns(result1 []*models.Terpene, result2 error) {
	fake.terpenesMutex.Lock()
	defer fake.terpenesMutex.Unlock()
	fake.TerpenesStub = nil
	fake.terpenesReturns = struct {
		result1 []*models.Terpene
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) TerpenesReturnsOnCall(i int, result1 []*models.Terpene, result2 error) {
	fake.terpenesMutex.Lock()
	defer fake.terpenesMutex.Unlock()
	fake.TerpenesStub = nil
	if fake.terpenesReturnsOnCall == nil {
		fake.terpenesReturnsOnCall = make(map[int]struct {
			result1 []*models.Terpene
			result2 error
		})
	}
	fake.terpenesReturnsOnCall[i] = struct {
		result1 []*models.Terpene
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.allProductsMutex.RLock()
	defer fake.allProductsMutex.RUnlock()
	fake.allProductsForCategoryMutex.RLock()
	defer fake.allProductsForCategoryMutex.RUnlock()
	fake.cannabinoidsMutex.RLock()
	defer fake.cannabinoidsMutex.RUnlock()
	fake.categoriesMutex.RLock()
	defer fake.categoriesMutex.RUnlock()
	fake.locationsMutex.RLock()
	defer fake.locationsMutex.RUnlock()
	fake.logErrorMutex.RLock()
	defer fake.logErrorMutex.RUnlock()
	fake.offersMutex.RLock()
	defer fake.offersMutex.RUnlock()
	fake.productMutex.RLock()
	defer fake.productMutex.RUnlock()
	fake.terpenesMutex.RLock()
	defer fake.terpenesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ workflow.Manager = new(FakeManager)
