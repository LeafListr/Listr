// Code generated by counterfeiter. DO NOT EDIT.
package factoryfakes

import (
	"sync"

	"github.com/Linkinlog/LeafListr/internal/factory"
	"github.com/Linkinlog/LeafListr/internal/workflow"
)

type FakeWorkflowFactory struct {
	FindByDispensaryStub        func(string) (workflow.Workflow, error)
	findByDispensaryMutex       sync.RWMutex
	findByDispensaryArgsForCall []struct {
		arg1 string
	}
	findByDispensaryReturns struct {
		result1 workflow.Workflow
		result2 error
	}
	findByDispensaryReturnsOnCall map[int]struct {
		result1 workflow.Workflow
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWorkflowFactory) FindByDispensary(arg1 string) (workflow.Workflow, error) {
	fake.findByDispensaryMutex.Lock()
	ret, specificReturn := fake.findByDispensaryReturnsOnCall[len(fake.findByDispensaryArgsForCall)]
	fake.findByDispensaryArgsForCall = append(fake.findByDispensaryArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.FindByDispensaryStub
	fakeReturns := fake.findByDispensaryReturns
	fake.recordInvocation("FindByDispensary", []interface{}{arg1})
	fake.findByDispensaryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeWorkflowFactory) FindByDispensaryCallCount() int {
	fake.findByDispensaryMutex.RLock()
	defer fake.findByDispensaryMutex.RUnlock()
	return len(fake.findByDispensaryArgsForCall)
}

func (fake *FakeWorkflowFactory) FindByDispensaryCalls(stub func(string) (workflow.Workflow, error)) {
	fake.findByDispensaryMutex.Lock()
	defer fake.findByDispensaryMutex.Unlock()
	fake.FindByDispensaryStub = stub
}

func (fake *FakeWorkflowFactory) FindByDispensaryArgsForCall(i int) string {
	fake.findByDispensaryMutex.RLock()
	defer fake.findByDispensaryMutex.RUnlock()
	argsForCall := fake.findByDispensaryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeWorkflowFactory) FindByDispensaryReturns(result1 workflow.Workflow, result2 error) {
	fake.findByDispensaryMutex.Lock()
	defer fake.findByDispensaryMutex.Unlock()
	fake.FindByDispensaryStub = nil
	fake.findByDispensaryReturns = struct {
		result1 workflow.Workflow
		result2 error
	}{result1, result2}
}

func (fake *FakeWorkflowFactory) FindByDispensaryReturnsOnCall(i int, result1 workflow.Workflow, result2 error) {
	fake.findByDispensaryMutex.Lock()
	defer fake.findByDispensaryMutex.Unlock()
	fake.FindByDispensaryStub = nil
	if fake.findByDispensaryReturnsOnCall == nil {
		fake.findByDispensaryReturnsOnCall = make(map[int]struct {
			result1 workflow.Workflow
			result2 error
		})
	}
	fake.findByDispensaryReturnsOnCall[i] = struct {
		result1 workflow.Workflow
		result2 error
	}{result1, result2}
}

func (fake *FakeWorkflowFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findByDispensaryMutex.RLock()
	defer fake.findByDispensaryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWorkflowFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ factory.WorkflowFactory = new(FakeWorkflowFactory)
