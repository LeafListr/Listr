// Code generated by counterfeiter. DO NOT EDIT.
package cachefakes

import (
	"sync"
	"time"

	"github.com/Linkinlog/LeafListr/internal/cache"
)

type FakeCacher struct {
	GetStub        func(string) (any, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 string
	}
	getReturns struct {
		result1 any
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 any
		result2 error
	}
	GetOrRetrieveStub        func(string, time.Duration, func() (any, error)) (any, error)
	getOrRetrieveMutex       sync.RWMutex
	getOrRetrieveArgsForCall []struct {
		arg1 string
		arg2 time.Duration
		arg3 func() (any, error)
	}
	getOrRetrieveReturns struct {
		result1 any
		result2 error
	}
	getOrRetrieveReturnsOnCall map[int]struct {
		result1 any
		result2 error
	}
	SetStub        func(string, time.Duration, any) error
	setMutex       sync.RWMutex
	setArgsForCall []struct {
		arg1 string
		arg2 time.Duration
		arg3 any
	}
	setReturns struct {
		result1 error
	}
	setReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCacher) Get(arg1 string) (any, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCacher) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeCacher) GetCalls(stub func(string) (any, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeCacher) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCacher) GetReturns(result1 any, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 any
		result2 error
	}{result1, result2}
}

func (fake *FakeCacher) GetReturnsOnCall(i int, result1 any, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 any
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 any
		result2 error
	}{result1, result2}
}

func (fake *FakeCacher) GetOrRetrieve(arg1 string, arg2 time.Duration, arg3 func() (any, error)) (any, error) {
	fake.getOrRetrieveMutex.Lock()
	ret, specificReturn := fake.getOrRetrieveReturnsOnCall[len(fake.getOrRetrieveArgsForCall)]
	fake.getOrRetrieveArgsForCall = append(fake.getOrRetrieveArgsForCall, struct {
		arg1 string
		arg2 time.Duration
		arg3 func() (any, error)
	}{arg1, arg2, arg3})
	stub := fake.GetOrRetrieveStub
	fakeReturns := fake.getOrRetrieveReturns
	fake.recordInvocation("GetOrRetrieve", []interface{}{arg1, arg2, arg3})
	fake.getOrRetrieveMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCacher) GetOrRetrieveCallCount() int {
	fake.getOrRetrieveMutex.RLock()
	defer fake.getOrRetrieveMutex.RUnlock()
	return len(fake.getOrRetrieveArgsForCall)
}

func (fake *FakeCacher) GetOrRetrieveCalls(stub func(string, time.Duration, func() (any, error)) (any, error)) {
	fake.getOrRetrieveMutex.Lock()
	defer fake.getOrRetrieveMutex.Unlock()
	fake.GetOrRetrieveStub = stub
}

func (fake *FakeCacher) GetOrRetrieveArgsForCall(i int) (string, time.Duration, func() (any, error)) {
	fake.getOrRetrieveMutex.RLock()
	defer fake.getOrRetrieveMutex.RUnlock()
	argsForCall := fake.getOrRetrieveArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCacher) GetOrRetrieveReturns(result1 any, result2 error) {
	fake.getOrRetrieveMutex.Lock()
	defer fake.getOrRetrieveMutex.Unlock()
	fake.GetOrRetrieveStub = nil
	fake.getOrRetrieveReturns = struct {
		result1 any
		result2 error
	}{result1, result2}
}

func (fake *FakeCacher) GetOrRetrieveReturnsOnCall(i int, result1 any, result2 error) {
	fake.getOrRetrieveMutex.Lock()
	defer fake.getOrRetrieveMutex.Unlock()
	fake.GetOrRetrieveStub = nil
	if fake.getOrRetrieveReturnsOnCall == nil {
		fake.getOrRetrieveReturnsOnCall = make(map[int]struct {
			result1 any
			result2 error
		})
	}
	fake.getOrRetrieveReturnsOnCall[i] = struct {
		result1 any
		result2 error
	}{result1, result2}
}

func (fake *FakeCacher) Set(arg1 string, arg2 time.Duration, arg3 any) error {
	fake.setMutex.Lock()
	ret, specificReturn := fake.setReturnsOnCall[len(fake.setArgsForCall)]
	fake.setArgsForCall = append(fake.setArgsForCall, struct {
		arg1 string
		arg2 time.Duration
		arg3 any
	}{arg1, arg2, arg3})
	stub := fake.SetStub
	fakeReturns := fake.setReturns
	fake.recordInvocation("Set", []interface{}{arg1, arg2, arg3})
	fake.setMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCacher) SetCallCount() int {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	return len(fake.setArgsForCall)
}

func (fake *FakeCacher) SetCalls(stub func(string, time.Duration, any) error) {
	fake.setMutex.Lock()
	defer fake.setMutex.Unlock()
	fake.SetStub = stub
}

func (fake *FakeCacher) SetArgsForCall(i int) (string, time.Duration, any) {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	argsForCall := fake.setArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCacher) SetReturns(result1 error) {
	fake.setMutex.Lock()
	defer fake.setMutex.Unlock()
	fake.SetStub = nil
	fake.setReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCacher) SetReturnsOnCall(i int, result1 error) {
	fake.setMutex.Lock()
	defer fake.setMutex.Unlock()
	fake.SetStub = nil
	if fake.setReturnsOnCall == nil {
		fake.setReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCacher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.getOrRetrieveMutex.RLock()
	defer fake.getOrRetrieveMutex.RUnlock()
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCacher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cache.Cacher = new(FakeCacher)
